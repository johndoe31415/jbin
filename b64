#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	b64: base64 en/decoding tool
#	Copyright (C) 2015-2018 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import hashlib
import re
import sys
import base64

linelen_bytes = 3 * 16		# Must be multiple of 3 bytes
blocklen_bytes = linelen_bytes * 1024

indata = sys.stdin.buffer.read(blocklen_bytes)
decode = b"------- BEGIN BASE64 -------" in indata

if decode:
	def readlines(bindata):
		lines = bindata.split(b"\n")
		remainder = lines[-1]
		return ([ line.decode("utf-8") for line in lines[:-1] ], remainder)

	continue_read = True
	databuf = bytearray()
	hashalg = hashlib.md5()
	total_len = 0
	expect = None
	state = "waiting"
	while continue_read:
		(lines, indata) = readlines(indata)
		for line in lines:
			line = line.strip()
			if (state == "waiting") and (line == "------- BEGIN BASE64 -------"):
				state = "decoding"
			elif (state == "decoding"):
				if line.startswith("------- END BASE64 "):
					continue_read = False
					expect = re.compile("------- END BASE64 len (?P<datalen>\d+) MD5 (?P<md5>[a-f0-9]{32}) -------").match(line)
					if expect is not None:
						expect = expect.groupdict()
						expect["datalen"] = int(expect["datalen"])
					break
				else:
					databuf += line.encode("utf-8")
					if len(databuf) >= 4:
						decode_bytes = len(databuf) // 4 * 4
						decoded_data = base64.b64decode(databuf[:decode_bytes])
						databuf = databuf[decode_bytes:]
						hashalg.update(decoded_data)
						total_len += len(decoded_data)
						sys.stdout.buffer.write(decoded_data)
		
		newdata = sys.stdin.buffer.read(blocklen_bytes)
		if len(newdata) == 0:
			break
		indata += newdata

	if expect is None:
		print("Warning: file was truncated, trailer is missing.", file = sys.stderr)
	else:
		if expect["datalen"] != total_len:
			print("Warning: trailer indicates %d bytes, but %d bytes were decoded." % (expect["datalen"], total_len), file = sys.stderr)
		digest = hashalg.hexdigest()
		if expect["md5"] != digest:
			print("Warning: trailer indicates MD5 %s, but %s was calculated over decoded data." % (expect["md5"], digest), file = sys.stderr)
else:
	print("------- BEGIN BASE64 -------")
	hashalg = hashlib.md5()
	total_len = len(indata)
	while True:
		hashalg.update(indata)
		for i in range(0, len(indata), linelen_bytes):
			print(base64.b64encode(indata[i : i + linelen_bytes]).decode("utf-8"))
		indata = sys.stdin.buffer.read(blocklen_bytes)
		total_len += len(indata)
		if len(indata) == 0:
			break
			
	print("------- END BASE64 len %d MD5 %s -------" % (total_len, hashalg.hexdigest()))
