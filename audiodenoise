#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	audiodenoise: Remove noise from audio sample
#	Copyright (C) 2025-2025 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import subprocess
import tempfile
import contextlib
from FriendlyArgumentParser import FriendlyArgumentParser

class AudioDenoiser():
	def __init__(self, args):
		self._args = args

	def _score_scale(self, min_value: float, max_value: float):
		r = max_value - min_value
		scalar = min_value + ((self._args.level - 1) / (5 - 1)) * r
		print(f"Backend {self._args.backend} at level {self._args.level}: score scalar {scalar:.3f}")
		return scalar

	def _run_sox(self, input_filename: str, noise_filename: str, output_filename: str):
		# 0.5 is default, more is more aggressive (more artifacts)
		noise_reduction_value = self._score_scale(0.05, 0.25)
		print(noise_reduction_value)
		with tempfile.NamedTemporaryFile() as profile:
			subprocess.run([ "sox", noise_filename, "-n", "noiseprof", profile.name ], check = True, stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)
			subprocess.run([ "sox", input_filename, output_filename, "noisered", profile.name, str(noise_reduction_value) ], check = True, stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)

	def _run_ffmpeg(self, input_filename: str, noise_filename: str, output_filename: str):
		# Noise reduction in dB, default to 12
		noise_reduction_db = self._score_scale(3, 20)
		subprocess.run([ "ffmpeg", "-i", input_filename, "-af", f"afftdn=nr={noise_reduction_db}", output_filename ], check = True, stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)

	def _run_noisereduce(self, input_filename: str, noise_filename: str, output_filename: str):
		import noisereduce
		import librosa
		import soundfile

		# 1.0 is default, more is more aggressive (more artifacts)
		noise_reduction_value = self._score_scale(0.5, 1.0)

		(audio, audio_sr) = librosa.load(input_filename, sr = None)
		(noise, noise_sr) = librosa.load(noise_filename, sr = None)
		assert(audio_sr == noise_sr)
		cleaned = noisereduce.reduce_noise(y = audio, sr = audio_sr, y_noise = noise, prop_decrease = noise_reduction_value, time_constant_s = 2.0, n_std_thresh_stationary = 1.5)
		soundfile.write(output_filename, cleaned, audio_sr)

	def run(self):
		for input_filename in self._args.input_filename:
			(prefix, extension) = os.path.splitext(input_filename)
			noise_filename = f"{prefix}{self._args.noise_suffix}{extension}"
			output_filename = os.path.basename(f"{prefix}{self._args.output_suffix}{extension}")
			output_filename = self._args.output_directory + "/" + output_filename
			output_filename = os.path.normpath(output_filename)

			if not os.path.isfile(noise_filename):
				print(f"Cannot denoise {input_filename}: no noise profile {noise_filename} exists.")
				continue

			if (not self._args.force) and os.path.exists(output_filename):
				print(f"Cannot denoise {input_filename}: output file {output_filename} already exists, refusing to overwrite.")
				continue
			with contextlib.suppress(FileNotFoundError):
				os.unlink(output_filename)

			print(f"{input_filename} -> remove {{{noise_filename}}} -> {output_filename}")
			if not self._args.dry_run:
				run_fnc = getattr(self, f"_run_{self._args.backend}")
				run_fnc(input_filename, noise_filename, output_filename)

parser = FriendlyArgumentParser(description = "Remove noise from audio data.")
parser.add_argument("--noise-suffix", metavar = "filename", default = "_noise", help = "Noise capture file suffix. Defaults to %(default)s.")
parser.add_argument("--output-suffix", metavar = "filename", default = "_denoised", help = "Denoised output file suffix. Defaults to %(default)s.")
parser.add_argument("-l", "--level", metavar = "int", type = int, default = 3, help = "Reduction level to apply. Less is gentler, more is more aggressive. Must be a value between 1 and 5. Defaults to %(default)d.")
parser.add_argument("-b", "--backend", choices = [ "sox", "ffmpeg", "noisereduce" ], default = "sox", help = "Denoising backend to use. Can be one of %(choices)s, defaults to %(default)s.")
parser.add_argument("-d", "--dry-run", action = "store_true", help = "Do not actually run denoise, but instead show what would be done.")
parser.add_argument("-f", "--force", action = "store_true", help = "Overwrite output files if they exist.")
parser.add_argument("-o", "--output-directory", metavar = "path", default = ".", help = "Output directory to write denoised audio to. Defaults to current directory.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("input_filename", nargs = "+", help = "Input filename(s) to denoise.")
args = parser.parse_args(sys.argv[1:])

AudioDenoiser(args).run()
