#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	git-find-uncommitted: Recursively find git repositories that are uncommited or unpushed
#	Copyright (C) 2020-2020 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import subprocess
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Find git repositories that are ")
parser.add_argument("-l", "--show-local", action = "store_true", help = "Also show local repositories")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("base_dir", metavar = "base_dir", type = str, nargs = "?", help = "Starting directory to search for; if omitted, current working directory is used")
args = parser.parse_args(sys.argv[1:])

for (basedir, subdirs, files) in os.walk(args.base_dir or "."):
	if ".git" in subdirs:
		current_dir = os.getcwd()
		git_repository_directory = os.path.realpath(basedir)
		os.chdir(git_repository_directory)
		valid_repo = subprocess.run([ "git", "status", "HEAD" ], stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL).returncode == 0
		if valid_repo:
			local_repo = (subprocess.run([ "git", "show-ref", "--quiet", "origin/master" ], stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL).returncode) != 0
			is_dirty = (subprocess.run([ "git", "diff", "--quiet" ], stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL).returncode) != 0
			index_dirty = (subprocess.run([ "git", "diff-index", "--quiet", "--cached", "HEAD", "--" ], stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL).returncode) != 0
			if not local_repo:
				is_unpushed = (subprocess.run([ "git", "diff", "--quiet", "origin/master..master" ], stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL).returncode) != 0
			else:
				is_unpushed = False
			if (not local_repo) or args.show_local:
				if local_repo or is_dirty or index_dirty or is_unpushed:
					status = [ ]
					if local_repo:
						status += [ "local" ]
					if is_dirty:
						status += [ "dirty" ]
					if index_dirty:
						status += [ "indexed" ]
					if is_unpushed:
						status += [ "unpushed" ]
					print("%s   %s" % (git_repository_directory, ", ".join(status)))
		else:
			if args.verbose >= 1:
				print("%s error" % (git_repository_directory))
		os.chdir(current_dir)
