#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	fix_symlinks: Fix broken symbolic links
#	Copyright (C) 2025-2025 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import stat
import collections
from FriendlyArgumentParser import FriendlyArgumentParser

class SymlinkFixer():
	def __init__(self, args):
		self._args = args

	def _traverse_all(self, path: str):
		root_path = os.path.realpath(path)
		for (path, files, dirs) in os.walk(root_path):
			for file in files:
				yield path + "/" + file
			for file in dirs:
				yield path + "/" + file

	def _traverse_type(self, path: str):
		for filename in self._traverse_all(path):
			statres = os.lstat(filename)
			if stat.S_ISLNK(statres.st_mode):
				yield (filename, "symlink")
			elif stat.S_ISDIR(statres.st_mode):
				yield (filename, "dir")
			elif stat.S_ISREG(statres.st_mode):
				yield (filename, "file")

	def _is_link_broken(self, path: str):
		try:
			os.stat(path)
		except FileNotFoundError:
			return True
		return False

	def _traverse_filtered(self, path: str, filetypes: set[str]):
		for (filename, filetype) in self._traverse_type(path):
			if filetype in filetypes:
				yield filename

	def run(self):
		broken = [ ]
		targets = set()
		for filename in self._traverse_filtered(self._args.fix_path, set([ "symlink" ])):
			if not self._is_link_broken(filename):
				continue
			target = os.readlink(filename)
			absolute_link = target.startswith("/")
			target_basename = os.path.basename(target)
			if self._args.verbose >= 2:
				print(f"Broken symlink: {filename} (points to nonexistent {target})")
			broken.append((filename, absolute_link, target_basename))
			targets.add(target_basename)

		if len(broken) == 0:
			print(f"No broken links found in {self._args.fix_path}.")
			return 0

		if self._args.verbose >= 1:
			print(f"Found {len(broken)} broken symlink(s) and need {len(targets)} target(s) to fix them.")

		matches = collections.defaultdict(list)
		for filename in self._traverse_filtered(self._args.search_path, set([ "file" ])):
			basename = os.path.basename(filename)
			if basename in targets:
				matches[basename].append(filename)

		if self._args.verbose >= 1:
			print(f"Found {len(matches)} matching target(s) in {self._args.search_path}.")

		replacements = [ ]
		for (filename, absolute_link, target_basename) in broken:
			if target_basename not in matches:
				# No match for this broken symlink found.
				continue

			matched_files = matches[target_basename]
			if len(matched_files) == 1:
				# Unique match!
				replacement = "XXX"
				if absolute_link:
					replacement = matched_files[0]
				else:
					replacement = os.path.relpath(matched_files[0], os.path.dirname(filename))
				replacements.append((filename, replacement))
			else:
				if self._args.verbose >= 1:
					print(f"Refusing to fix {filename} because of {len(matched_files)} ambiguous target matches.")

		if not self._args.commit:
			for (filename, replacement) in replacements:
				print(f"{filename} -> {replacement}")
			yn = input("Proceed (y/n)? ")
			if yn.lower() != "y":
				print("Aborted.")
				return 1

		for (filename, replacement) in replacements:
			os.unlink(filename)
			os.symlink(replacement, filename)

parser = FriendlyArgumentParser(description = "Fix broken symbolic links.")
parser.add_argument("-c", "--commit", action = "store_true", help = "Commit automatically without asking beforehand.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("fix_path", help = "Directory to search for broken symlinks.")
parser.add_argument("search_path", help = "Directory to search for files which could replace broken symlinks.")
args = parser.parse_args(sys.argv[1:])

slf = SymlinkFixer(args)
slf.run()
