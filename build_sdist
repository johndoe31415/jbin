#!/usr/bin/env python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	build_sdist: Build a Python package from the current working directory
#	Copyright (C) 2021-2021 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import shutil
import subprocess
import contextlib
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Build a Python package from the current working directory.")
parser.add_argument("-n", "--name", metavar = "pkgname", help = "Specifies the module name that is used to generate the package. By default, the basename of the current working directory is used for this.")
parser.add_argument("-l", "--local-install", action = "store_true", help = "Locally install the package after building it.")
parser.add_argument("-u", "--twine-upload", action = "store_true", help = "Upload the package to twine after building it.")
args = parser.parse_args(sys.argv[1:])

if args.name is None:
	pkgname = os.path.basename(os.getcwd())
else:
	pkgname = args.name

try:
	sys.path.insert(0, ".")
	module = __import__(pkgname)
except ModuleNotFoundError as e:
	print("Fatal: Could not find module '%s' (%s)." % (pkgname, str(e)))
	sys.exit(1)

imported_path = os.path.realpath(module.__file__)
wanted_path = os.path.realpath(pkgname + "/__init__.py")
if imported_path != wanted_path:
	print("Fatal: Did not import the correct module. Wanted %s but imported %s." % (wanted_path, imported_path))
	sys.exit(1)

version = getattr(module, "VERSION", None)
if version is None:
	print("Fatal: Could not get VERSION information from module %s." % (str(module)))
	sys.exit(1)

if ("rc" in version) and (args.twine_upload):
	print("Error: Refusing to upload release candidate '%s' to PyPi." % (version))
	sys.exit(1)

with contextlib.suppress(FileNotFoundError):
	shutil.rmtree("build")
with contextlib.suppress(FileNotFoundError):
	shutil.rmtree("dist")
with contextlib.suppress(FileNotFoundError):
	shutil.rmtree("%s.egg-info" % (pkgname))

subprocess.run([ "python3", "setup.py", "sdist" ])
if args.local_install:
	subprocess.run([ "pip3", "install", "--user", "--force-reinstall", "dist/%s-%s.tar.gz" % (pkgname, version) ])
if args.twine_upload:
	subprocess.run([ "twine", "upload", "dist/%s-%s.tar.gz" % (pkgname, version) ])
