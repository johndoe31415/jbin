#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	netspeed: Display the speed over a network interface
#	Copyright (C) 2024-2024 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import time
import re
import subprocess
from FriendlyArgumentParser import FriendlyArgumentParser
from FilesizeFormatter import FilesizeFormatter

class NetSpeedMonitor():
	_ROUTE_ENTRY_RE = re.compile(r"^(?P<ifname>[^\s]+)\s+(?P<dest>[^\s]+)\s+(?P<gateway>[^\s]+)\s+(?P<flags>[0-9A-Fa-f]+)\s+", flags = re.MULTILINE)
	_RXTX_RE = re.compile(r"RX: .*?\n\s*(?P<rxbytes>\d+)\s+(?P<rxpkts>\d+).*?TX: .*?\n\s*(?P<txbytes>\d+)\s+(?P<txpkts>\d+)", flags = re.MULTILINE | re.DOTALL)

	def __init__(self, args):
		self._args = args
		if self._args.ifname is None:
			self._interface = self._get_default_gateway_interface()
		else:
			self._interface = self._args.ifname
		self._last_time = None
		self._last_state = None
		self._fsf = FilesizeFormatter()

	def _get_default_gateway_interface(self):
		with open("/proc/net/route") as f:
			route = f.read()
		for rematch in self._ROUTE_ENTRY_RE.finditer(route):
			group = rematch.groupdict()
			flags = int(group["flags"], 16)
			if (flags & 3) == 3:
				return group["ifname"]
		raise ValueError("No default gateway found.")

	def _check_interface(self):
		output = subprocess.check_output([ "ip", "-s", "link", "show", "dev", self._interface ]).decode("ascii")
		rematch = self._RXTX_RE.search(output)
		group = rematch.groupdict()
		group = { key: int(value) for (key, value) in group.items() }
		return group

	def run(self):
		while True:
			state = self._check_interface()
			now = time.time()
			if self._last_state is not None:
				rxbytes = state["rxbytes"] - self._last_state["rxbytes"]
				txbytes = state["txbytes"] - self._last_state["txbytes"]
				tdiff = now - self._last_time
				print(f"RX: {self._fsf(round(rxbytes / tdiff))}/sec  TX: {self._fsf(round(txbytes / tdiff))}/sec")
			self._last_time = now
			self._last_state = state
			time.sleep(self._args.time_delay)

parser = FriendlyArgumentParser(description = "Monitor a network interface and display its upload/download speed.")
parser.add_argument("-t", "--time-delay", metavar = "secs", type = float, default = 3, help = "Delay between printing two messages, in seconds. Defaults to %(default).1f seconds.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("ifname", nargs = "?", help = "Network interface to monitor. If none specified, uses the interface the default gateway is set to.")
args = parser.parse_args(sys.argv[1:])

nsm = NetSpeedMonitor(args)
nsm.run()
