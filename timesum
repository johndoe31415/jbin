#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	timesum: Add/subtract times
#	Copyright (C) 2013-2024 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import re
import sys

regex = re.compile(r"^(?P<neg>-)?(:?(?P<hour>\d+)[:\.])?(?P<min>\d+)(?:(?P<minishr>h))?$")
def match_time(timestr):
	match = regex.match(timestr)
	if match:
		if match["hour"] is None:
			if match["minishr"] is None:
				value = int(match["min"])
			else:
				value = 60 * int(match["min"])
		else:
			value = 60 * int(match["hour"]) + int(match["min"])
		if match["neg"] is not None:
			value = -value
		return value

if (len(sys.argv) >= 2) and (sys.argv[1] == "testcase"):
	print("Executing testcases...")
	assert(match_time("02") == 2)
	assert(match_time("2") == 2)
	assert(match_time("1:2") == 60 + 2)
	assert(match_time("1:02") == 60 + 2)
	assert(match_time("1x02") == None)
	assert(match_time("1-02") == None)
	assert(match_time("1:20") == 60 + 20)
	assert(match_time("1.2") == 60 + 2)
	assert(match_time("1.02") == 60 + 2)
	assert(match_time("1.20") == 60 + 20)
	assert(match_time("3h") == 3 * 60)
	assert(match_time("-02") == -2)
	assert(match_time("-2") == -2)
	assert(match_time("-1:2") == -60 - 2)
	assert(match_time("-1:02") == -60 - 2)
	assert(match_time("-1:20") == -60 - 20)
	assert(match_time("-1.2") == -60 - 2)
	assert(match_time("-1.02") == -60 - 2)
	assert(match_time("-1.20") == -60 - 20)
	assert(match_time("-3h") == -3 * 60)
	sys.exit(0)

try:
	timesum = 0
	while True:
		entrystr = input("Time (h:m): ")
		entry = match_time(entrystr)
		if entry is None:
			print("Unable to parse '%s'" % (entrystr))
			continue
		else:
			timesum += entry
		if entry >= 0:
			sign = "+"
		else:
			sign = "-"
		print("%s%3d:%02d -> %3d:%02d = %5d min" % (sign, entry // 60, entry % 60, timesum // 60, timesum % 60, timesum))
except (EOFError, KeyboardInterrupt):
	print()
