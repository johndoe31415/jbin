#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	stopwatch: Show a command-line timer
#	Copyright (C) 2022-2022 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import time
import datetime
import sys
import signal

class StopWatch():
	def __init__(self):
		self._t0 = time.time()
		self._tsum = 0

	@property
	def seconds(self):
		if self._t0 is not None:
			return round(time.time() - self._t0 + self._tsum)
		else:
			return round(self._tsum)

	@property
	def stopped(self):
		return self._t0 is None

	def _start(self):
		self._t0 = time.time()

	def _stop(self):
		self._tsum += time.time() - self._t0
		self._t0 = None

	@staticmethod
	def _fmt_now():
		return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

	@staticmethod
	def _fmt_secs(secs):
		if secs < 3600:
			return f"{secs // 60}:{secs % 60:02d}"
		else:
			return f"{secs // 3600}:{secs % 3600 // 60:02d}:{secs % 3600 % 60:02d}"


	@staticmethod
	def _input_timeout(prompt, timeout_secs):
		class TimeExpiredException(Exception): pass

		def raise_exception(signum, frame):
			raise TimeExpiredException()

		try:
			signal.signal(signal.SIGALRM, raise_exception)
			signal.alarm(timeout_secs)
			result = input(prompt)
			signal.alarm(0)
		except TimeExpiredException:
			result = None
		return result


	def run(self):
		clr = "\r\033[K"

		print(f"Start time: {self._fmt_now()}")
		try:
			while True:
				cmd = self._input_timeout(f"{clr}{self._fmt_secs(self.seconds)} {'stopped' if self.stopped else ''}", timeout_secs = 1)
				if cmd == "":
					if not self.stopped:
						print(f"Intermediate time: {self._fmt_now()} -- time taken {self._fmt_secs(self.seconds)}")
				elif cmd == "s":
					if not self.stopped:
						# Stopping
						print(f"Stopped at: {self._fmt_now()} -- time taken {self._fmt_secs(self.seconds)}")
						self._stop()
					else:
						# Starting
						print(f"Restarted at: {self._fmt_now()} -- time taken {self._fmt_secs(self.seconds)}")
						self._start()

		except KeyboardInterrupt:
			pass
		finally:
			print()
			print(f"End time: {self._fmt_now()} -- time taken {self._fmt_secs(self.seconds)}")

StopWatch().run()
