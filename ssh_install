#!/bin/bash
#	jbin - Joe's miscellaneous scripts, tools and configs
#	ssh_install: install user's ssh public key to remote authorized_keys
#	Copyright (C) 2011-2018 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

if [ "$1" == "" ]; then
	echo "$0 (-p port) [user@hostname]"
	exit 1
fi
if [ "$1" == "-p" ]; then
	shift
	PORT=$1
	shift
else
	PORT=22
fi
SSHDIR="${HOME}/.ssh/"
SSHPUBKEY="${SSHDIR}id_ed25519.pub"
LOGFILE="${SSHDIR}install.log"
if [ ! -d "$SSHDIR" ]; then
	echo "Local ssh directory $SSHDIR does not exist."
	exit 1
fi
if [ ! -f "$SSHPUBKEY" ]; then
	echo "Public key file $SSHPUBKEY does not exist."
	exit 1
fi
PUBKEYINFO=`ssh-keygen -l -f "$SSHPUBKEY"`
KEYLEN=`echo "$PUBKEYINFO" | awk '{print $1}'`
KEYTYPE=`echo "$PUBKEYINFO" | awk '{print $4}'`

KEYCHECK=0
if [ "$KEYTYPE" == "(ED25519)" ] && [ "$KEYLEN" == "256" ]; then
	KEYCHECK=1
fi
if [ "$KEYCHECK" != "1" ]; then
	echo "Key type '${KEYTYPE}' length '${KEYLEN}' is not permitted for installation."
	echo "Please regenerate key or change $0."
	exit 1
fi

cat "${HOME}/.ssh/id_ed25519.pub" | ssh -p "$PORT" "$1" 'mkdir "${HOME}/.ssh" >/dev/null 2>&1; chmod 700 "${HOME}/.ssh"; cat >>"${HOME}/.ssh/authorized_keys"; chmod 600 "${HOME}/.ssh/authorized_keys"; chmod 600 "${HOME}/.ssh/authorized_keys"'
result="$?"

isodate=`/bin/date +'%Y-%m-%d %H:%M:%S'`
key=`cat "$SSHPUBKEY"`
echo "${isodate}: ${1} port ${PORT} result ${result} key ${key}" >>"$LOGFILE"
