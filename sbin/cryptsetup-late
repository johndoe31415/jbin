#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	cryptsetup-late: Perform late cryptsetup (not during boot time)
#	Copyright (C) 2024-2024 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import subprocess
import re
import os
import pwd
import collections
from FriendlyArgumentParser import FriendlyArgumentParser

class CryptSetupRunner():
	ConfigLine = collections.namedtuple("ConfigLine", [ "mapper_name", "src_dev", "keyfile", "options" ])

	def __init__(self, args):
		self._args = args
		self._config = self._parse_config()

	def _parse_config(self):
		config = [ ]
		with open(self._args.config_filename) as f:
			for (lineno, line) in enumerate(f, 1):
				if line.lstrip(" \t").startswith("#"):
					continue

				parts = re.split(r"\s+", line)
				if len(parts) < 4:
					print("Unparsable line {lineno}: {line} -- expected 4 arguments.", file = sys.stderr)

				config.append(self.ConfigLine(*parts[:4]))
		return config

	def _device_open(self, name: str) -> bool:
		result = subprocess.run([ "dmsetup", "status", name ], stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL, check = False)
		return result.returncode == 0

	def _attempt_cryptsetup(self, config_line: str) -> bool:
		print(f"Now opening: {config_line.mapper_name} from source device {config_line.src_dev}")
		result = subprocess.run([ "cryptsetup", "luksOpen", config_line.src_dev, config_line.mapper_name ], check = False)
		if result.returncode == 0:
			print(f"Successfully set up {config_line.mapper_name}")
			return True
		else:
			print(f"Failed to set up {config_line.mapper_name}")
			return False

	def _run(self, config_line: "ConfigLine"):
		if self._device_open(config_line.mapper_name):
			print(f"Device already open: {config_line.mapper_name}, skipping", file = sys.stderr)
			return False
		return self._attempt_cryptsetup(config_line)

	def _execute_as_user(self, user_entry, hook_script_name: str):
		print(f"Executing as {user_entry.pw_name}: {hook_script_name}")
		cmd = [ "runuser", "-u", user_entry.pw_name, hook_script_name ]
		subprocess.call(cmd)

	def _execute_user_hooks(self):
		for user_entry in pwd.getpwall():
			hook_script_name = self._args.user_hook_name.replace("~", user_entry.pw_dir)
			if os.path.isfile(hook_script_name):
				self._execute_as_user(user_entry, hook_script_name)

	def _execute_global_hook(self):
		if os.path.isfile(self._args.global_hook_name):
			print(f"Running {self._args.global_hook_name} as current user.")
			subprocess.call([ self._args.global_hook_name ])

	def run(self):
		changes_made = False
		for config_line in self._config:
			changes_made = self._run(config_line) or changes_made
		changes_made = True
		if changes_made:
			self._execute_global_hook()
			self._execute_user_hooks()

parser = FriendlyArgumentParser(description = "Sets up cryptsetup mapping and runs user-specific hooks afterwards.")
parser.add_argument("-c", "--config-filename", metavar = "filename", default = "/etc/crypttab.late", help = "Configuration file to read. Same format as crypttab. Defaults to %(default)s.")
parser.add_argument("-H", "--user-hook-name", metavar = "filename", default = "~/.local/bin/cryptsetup-late-hook", help = "For each user, this hook is executed after changes were made (under the specific users' account). Defaults to %(default)s.")
parser.add_argument("-g", "--global-hook-name", metavar = "filename", default = "/root/.local/bin/cryptsetup-global-hook", help = "When this file exists and changes were made, this script is executed as the current user (typically root), before user hooks are run. Defaults to %(default)s.")
args = parser.parse_args(sys.argv[1:])

csr = CryptSetupRunner(args)
csr.run()
