#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	Copyright (C) 2018-2024 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import re
import subprocess
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Renames a network interface from its old name to a new one.")
parser.add_argument("-t", "--temporary", action = "store_true", help = "By default, systemd rules are created to make the change permanent. With this option, changes remain temporary.")
parser.add_argument("old_ifname", metavar = "old_ifname", help = "Current interface name that should be renamed")
parser.add_argument("new_ifname", metavar = "new_ifname", help = "New name the interface should be given")
args = parser.parse_args(sys.argv[1:])

link_info = subprocess.check_output([ "ip", "-o", "link", "list", args.old_ifname ]).decode("ascii")
mac_re = re.compile("link/ether (?P<mac>[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2})")
result = mac_re.search(link_info)
if result is None:
	raise Exception("Cannot determine MAC address from link info.")
result = result.groupdict()
mac = result["mac"]

if not args.temporary:
	# Persist changes
	filename = f"/etc/systemd/network/01-netif-{args.new_ifname}.link"
	if os.path.isfile(filename):
		raise Exception(f"Already exists: {filename}")

	with open(filename, "w") as f:
		print("[Match]", file = f)
		print(f"MACAddress={mac}", file = f)
		print("Type=!vlan bridge", file = f)
		print(file = f)
		print("[Link]", file = f)
		print("Name={args.new_ifname}", file = f)

subprocess.check_call(["ip", "link", "set", args.old_ifname, "down" ])
subprocess.check_call(["ip", "link", "set", args.old_ifname, "name", args.new_ifname ])
subprocess.check_call(["ip", "link", "set", args.new_ifname, "up" ])

if not args.temporary:
	subprocess.check_call([ "update-initramfs", "-u" ])
