#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	jsonlint: Pretty-print JSON data
#	Copyright (C) 2019-2023 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import json
import sys
import collections
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Format a JSON file nicely.")
parser.add_argument("-u", "--allow-unicode", action = "store_true", help = "Do not force ASCII-only output, but allow unicode characters as well.")
parser.add_argument("-S", "--use-spaces", action = "store_true", help = "Use spaces instead of tabs for indentation. Only has an effect when the 'pretty' output format is chosen.")
parser.add_argument("-s", "--sort-keys", choices = [ "alphabetical", "keep" ], default = "keep", help = "Sort the keys of dicts in the described fashion. Can be one of %(choices)s, defaults to %(default)s.")
parser.add_argument("-o", "--output-format", choices = [ "pretty", "oneline", "brief" ], default = "pretty", help = "Show the output in the described fashion. Can be one of %(choices)s, defaults to %(default)s.")
parser.add_argument("filename", metavar = "filename", nargs = "?", help = "Lint this filename. If omitted, read from stdin.")
args = parser.parse_args(sys.argv[1:])

if args.filename is not None:
	with open(args.filename) as f:
		data = f.read()
else:
	data = sys.stdin.read()
data = json.loads(data, object_pairs_hook = collections.OrderedDict)

if args.output_format == "pretty":
	text = json.dumps(data, indent = 4 if (not args.use_spaces) else "\t", sort_keys = args.sort_keys == "alphabetical", ensure_ascii = not args.allow_unicode)
	print(text)
elif args.output_format == "oneline":
	print(json.dumps(data, sort_keys = args.sort_keys == "alphabetical"), ensure_ascii = not args.allow_unicode)
elif args.output_format == "brief":
	print(json.dumps(data, separators = (",", ":"), sort_keys = args.sort_keys == "alphabetical"), ensure_ascii = not args.allow_unicode)
else:
	raise NotImplementedError(args.output_format)
