#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	sanepass: Create fixed-entropy passwords with a nice alphabet
#	Copyright (C) 2018-2024 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import string
import math
import functools
import subprocess
import re
import random
from FriendlyArgumentParser import FriendlyArgumentParser

class PasswordGenerator():
	_AMBIGUOUS_CHARACTERS = set("".join([
		"1liI",
		"B8",
		"O0o",
		"UV",
		"uv",
		"2Z",
		"6G",
	]))
	_US_ALPHABET_AMBIGUOUS_CHARACTER = set("zZyY")

	# Characters that are on the same key on both US and DE
	_SAFE_SPECIAL_CHARS = set("!$%")

	def __init__(self, args):
		self._args = args

		self._alphabet = {
			"all":		string.ascii_uppercase + string.ascii_lowercase + string.digits,
			"chars":	string.ascii_uppercase + string.ascii_lowercase,
			"phone":	string.ascii_lowercase,
		}

	@property
	def base_alphabet(self):
		alphabet = set(string.ascii_lowercase)
		if not self._args.lower_case_only:
			alphabet |= set(string.ascii_uppercase)
		if self._args.digits:
			alphabet |= set(string.digits)
		if self._args.special:
			alphabet |= self._SAFE_SPECIAL_CHARS
		alphabet -= self._AMBIGUOUS_CHARACTERS
		alphabet -= self._US_ALPHABET_AMBIGUOUS_CHARACTER
		return alphabet

	@functools.cached_property
	def alphabets(self):
		if self._args.mode == "random":
			alphabets = [ list(self.base_alphabet) ]
		elif self._args.mode == "pronouncible":
			vovels = set("aeiouAEIOU")
			base = self.base_alphabet
			alphabet1 = list(base - vovels)
			alphabet2 = list(base & vovels)
			alphabets = [ list(alphabet1), list(alphabet2) ]
		elif self._args.mode == "dictionary":
			cmd = [ "aspell", "--lang", self._args.dictionary_locale, "dump", "master" ]
			wordlist = subprocess.check_output(cmd).decode("utf-8")
			words = set()
			remove_re = re.compile("['/].*$")
			for word in wordlist.split("\n"):
				word = remove_re.sub("", word)
				if not (3 <= len(word) <= 8):
					continue
				words.add(word)
			alphabets = [ list(words) ]
		else:
			raise NotImplementedError(self._args.mode)

		# We do shuffle so the very last character is also randomly distributed
		for alphabet in alphabets:
			random.shuffle(alphabet)
		return alphabets

	@property
	def joinstr(self):
		if self._args.mode == "dictionary":
			return " "
		else:
			return ""

	def _gen_rand_int_bits(self, bits: int):
		byte_count = (bits + 7) // 8
		return int.from_bytes(os.urandom(byte_count))

	def _compute_needed_entropy_bits(self):
		min_bits = 0
		if self._args.min_length is not None:
			need_bits = 0
			alphabets = self.alphabets
			for i in range(self._args.min_length):
				need_bits += math.log(len(alphabets[i % len(alphabets)]), 2)
			min_bits = math.ceil(need_bits)
		return max(min_bits, self._args.entropy_bits)

	def _gen_rand_int(self):
		bits = self._compute_needed_entropy_bits()
		return self._gen_rand_int_bits(bits)

	def _gen_password(self):
		alphabets = self.alphabets
		pw = self._gen_rand_int()
		chars = [ ]

		while pw > 0:
			alphabet_index = len(chars) % len(alphabets)
			alphabet = alphabets[alphabet_index]

			(pw, next_choice) = divmod(pw, len(alphabet))
			chars.append(alphabet[next_choice])
		return chars

	def _validate(self, pw: str):
		if not self._args.guarantee_special:
			return True

		if self._args.digits and (len(set(pw) & set(string.digits)) == 0):
			return False

		if self._args.special and (len(set(pw) & self._SAFE_SPECIAL_CHARS) == 0):
			return False

		return True

	def run(self):
		while True:
			pw = self._gen_password()
			pw = self.joinstr.join(pw)
			if self._args.max_length is not None:
				pw = pw[:self._args.max_length]
			if self._validate(pw):
				print(pw)
				return


parser = FriendlyArgumentParser(description = "Generate passwords with a minimum amount of entropy.")
parser.add_argument("--dictionary-locale", metavar = "locale", default = "en", help = "Locale to choose when dumping the aspell dictionary in dictionary mode.")
parser.add_argument("-d", "--digits", action = "store_true", help = "Include numbers in alphabet selection.")
parser.add_argument("-s", "--special", action = "store_true", help = "Include special characters in alphabet selection.")
parser.add_argument("-g", "--guarantee-special", action = "store_true", help = "Guarantee digits/special characters are present when including them in the alphabet.")
parser.add_argument("-c", "--lower-case-only", action = "store_true", help = "Do not use uppercase letters.")
parser.add_argument("-l", "--min-length", metavar = "chars", type = int, help = "Use this minimum length of characters.")
parser.add_argument("-L", "--max-length", metavar = "chars", type = int, help = "Use this maximum length of characters. Will truncate the entropy!")
parser.add_argument("-m", "--mode", choices = [ "random", "dictionary", "pronouncible" ], default = "random", help = "Mode to use for password generation. Can be one of %(choices)s, defaults to %(default)s.")
parser.add_argument("entropy_bits", metavar = "bits", type = int, nargs = "?", default = 128, help = "Bits of entropy the password should contain. Defaults to %(default)d bit.")
args = parser.parse_args(sys.argv[1:])

pwgen = PasswordGenerator(args)
pwgen.run()
