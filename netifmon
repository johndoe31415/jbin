#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	netifmon: Monitor a network interface for IP address changes
#	Copyright (C) 2024-2024 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import time
import datetime
import re
import subprocess
from FriendlyArgumentParser import FriendlyArgumentParser

class NetIfMonitor():
	_ADDRESS_RE = re.compile(r"^\s+(inet|inet6) (?P<addr>[^\s]+)", flags = re.MULTILINE)

	def __init__(self, args):
		self._args = args
		self._last_addresses = None

	def _get_addresses(self):
		output = subprocess.check_output([ "ip", "a", "s", self._args.ifname ]).decode("ascii")
		addresses = [ ]
		for rematch in self._ADDRESS_RE.finditer(output):
			group = rematch.groupdict()
			addresses.append(group["addr"])
		addresses.sort()
		return addresses

	def _log_addresses(self, addresses):
		log_str = f"{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {' '.join(addresses)}"
		with open(self._args.output_logfile, "a") as f:
			print(log_str, file = f)

	def _check_interface(self):
		addresses = self._get_addresses()
		if addresses != self._last_addresses:
			self._log_addresses(addresses)
			self._last_addresses = addresses

	def run(self):
		while True:
			self._check_interface()
			time.sleep(3)

parser = FriendlyArgumentParser(description = "Monitor a network interface for address changes.")
parser.add_argument("-o", "--output-logfile", metavar = "filename", default = "netifmon.log", help = "Filename to log to. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("ifname", help = "Network interface to monitor")
args = parser.parse_args(sys.argv[1:])

nim = NetIfMonitor(args)
nim.run()
