#!/usr/bin/python3
#	jbin - Joe's miscellaneous scripts, tools and configs
#	cpu_loadtest: Put the CPU under heavy load and monitor temperature
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of jbin.
#
#	jbin is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	jbin is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jbin. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import subprocess
import time
import collections
import sys
import json
import os
import multiprocessing
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Put all CPUs of a system under stress and monitor the temperature while it's happening.")
parser.add_argument("-s", "--sensors", choices = [ "lm-sensors", "rpi" ], default = "lm-sensors", help = "Source of the sensor data to use. Defaults to %(default)s and can be one of %(choices)s.")
parser.add_argument("-d", "--delay", metavar = "secs", type = float, default = 5, help = "Time inbetween measurement in seconds. Defaults to %(default).1f.")
parser.add_argument("-l", "--logfile", metavar = "filename", help = "Log the results to the given text file.")
parser.add_argument("-j", "--json-logfile", metavar = "filename", help = "Log the results to the given JSON file.")
args = parser.parse_args(sys.argv[1:])

class LoadProcess(multiprocessing.Process):
	def __init__(self):
		multiprocessing.Process.__init__(self)
		self._chunksize = 1024 * 1024
		self._total_bytes_read = multiprocessing.Value("i")
		self._child_pid = None
		self._t0 = None
		self._t1 = None

	@property
	def total_bytes_read(self):
		return self._total_bytes_read.value

	@property
	def runtime(self):
		if self._t0 is None:
			return None
		t1 = self._t1 if (self._t1 is not None) else time.time()
		return t1 - self._t0

	def run(self):
		with open("/dev/urandom", "rb") as f:
			while True:
				read_bytes = f.read(self._chunksize)
				self._total_bytes_read.value += len(read_bytes)

	def start(self):
		self._t0 = time.time()
		multiprocessing.Process.start(self)

	def end(self):
		self.terminate()
		self.join()
		self._t1 = time.time()

class TempMonitor():
	def __init__(self, args):
		self._args = args
		self._max_temp = 0
		self._max_temp_at = 0
		self._initial_temp = self.get_temperature()
		self._datapoints = [ ]

	def get_temperature(self):
		if self._args.sensors == "lm-sensors":
			return self._lm_sensors_get_temp()
		elif self._args.sensors == "rpi":
			return self._rpi_get_temp()
		else:
			raise NotImplementedError(self._args.sensors)

	def _lm_sensors_get_temp(self):
		stdout = subprocess.check_output([ "sensors", "-u", "coretemp-*" ]).decode("ascii")
		name = None
		temperatures = collections.OrderedDict()
		for line in stdout.split("\n"):
			if line.endswith(":"):
				name = line[:-1]
			elif "_input: " in line:
				temp = float(line.split(":")[1])
				temperatures[name] = temp
				name = None
		return temperatures

	def _rpi_get_temp(self):
		stdout = subprocess.check_output([ "vcgencmd", "measure_temp" ]).decode("ascii")
		stdout = stdout.rstrip("\r\n")
		assert(stdout.startswith("temp="))
		stdout = stdout[5:]
		assert(stdout.endswith("'C"))
		stdout = stdout[:-2]
		cputemp = float(stdout)
		return collections.OrderedDict([ ("CPU", cputemp) ])

	def _get_clkfreq_mhz_sysfs(self):
		with open("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq") as f:
			return int(f.read().rstrip("\r\n")) / 1000

	def _get_clkfreq_mhz_rpi(self):
		stdout = subprocess.check_output([ "vcgencmd", "measure_clock", "arm" ]).decode("ascii")
		stdout = stdout.rstrip("\r\n")
		stdout = stdout.split("=")
		return int(stdout[1]) / 1e6

	def get_clkfreq_mhz(self):
		if self._args.sensors == "lm-sensors":
			return self._get_clkfreq_mhz_sysfs()
		elif self._args.sensors == "rpi":
			return self._get_clkfreq_mhz_rpi()
		else:
			raise NotImplementedError(self._args.sensors)

	def print(self, time_secs_float):
		time_secs = round(time_secs_float)
		sensors_data = self.get_temperature()

		maxtemp = max(sensors_data.values())
		if maxtemp > self._max_temp:
			self._max_temp = maxtemp
			self._max_temp_at = time_secs
		sensors_str = ", ".join("%s = %4.1fÂ°C" % (name, temp) for (name, temp) in sensors_data.items())
		avg_temp = sum(sensors_data.values()) / len(sensors_data)
		maxdiff = max((now - initial) for (now, initial) in zip(sensors_data.values(), self._initial_temp.values()))
		clkfreq = self.get_clkfreq_mhz()

		pieces = [ "%2d:%02d: %4.0f MHz" % (time_secs // 60, time_secs % 60, clkfreq) ]
		if len(sensors_data) > 1:
			pieces += [ "Avg %4.1f" % (avg_temp) ]
		pieces += [ "Max %4.1f at %d:%02d" % (self._max_temp, self._max_temp_at // 60, self._max_temp_at % 60) ]
		pieces += [ "Delta %+5.1f" % (maxdiff) ]
		pieces += [ sensors_str ]
		line = ", ".join(pieces)
		print(line)
		if self._args.logfile:
			with open(self._args.logfile, "a") as f:
				print(line, file = f)
		if self._args.json_logfile:
			data_point = {
				"time":			time_secs_float,
				"avg_temp":		avg_temp,
				"clkfreq":		clkfreq,
				"temperature":	list(sensors_data.items()),
			}
			self._datapoints.append(data_point)
			with open(self._args.json_logfile, "w") as f:
				json.dump(self._datapoints, f)
				f.write("\n")

cpu_count = 0
with open("/proc/cpuinfo") as f:
	for line in f:
		if line.startswith("processor"):
			cpu_count += 1

temp_monitor = TempMonitor(args, load_procs)

procs = [ subprocess.Popen([ "dd", "if=/dev/urandom", "of=/dev/null", "bs=1M" ], stdout = subprocess.DEVNULL) for i in range(cpu_count) ]
print("Started %d processes." % (len(procs)))

try:
	t0 = time.time()
	while True:
		t = time.time() - t0
		temp_monitor.print(time_secs_float = t)
		time.sleep(args.delay)
finally:
	for proc in procs:
		proc.kill()
